
let square1=(x)=>{ return x*x};
console.log(square1(2)); ///OUTPUT: 4

let square1_1=(x)=>{x*x}; /// HERE CURLY BRACKETS USED , WHENEVER WE USE CURLY BRACKETS WE SHOULD WRITE RETURN KEYWORD
console.log(square1_1(2));   ///OUTPUT: undefined

let square2=(x)=>(x*x);
console.log(square2(3));  ///OUTPUT: 9

let square2_1=(x)=>(return x*x);  //// HERE PARANTHESIS IS USED, WHENEVER WE USE PARANTHESIS WE SHOULDN'T WRITE RETRUN KEYWORD
console.log(square2_1(4)) /// OUTPUT IS ERROR: Unexpected token 'return'

let square3=(x)=> x*x;
console.log(square3(5)); ///OUTPUT: 25




Q: Can Child component  change the parent state variable ?
Yes, if we send state function as argument as a function then, just calling that function.
const [showIndex, setShowIndex] = useState(1);
{categories.map((category, index) =>
                <RestaurantCategory
                    data={category.card.card}
                    key={category.card.card.title}
                    showItems={index === showIndex ? true : false}
                    setShowIndex={() => setShowIndex(index)} />  
            )}

         // Here we are trying to chane the showindex in child componet.   
         and setfunction is sent as argument as a function. Tried to send set function as normal argument but, getting "infine loop error"




data sent received by reducer from dispatch AddItem(item) to action.
payload
: 
card
: 
{@type: 'type.googleapis.com/swiggy.presentation.food.v2.Dish', info: {…}, analytics: {…}, hideRestaurantDetails: true}
[[Prototype]]
: 
Object
type
: 
"cart/AddItem"



REDUX V/S UseContext

React's useContext hook and Redux are both state management tools, but they are designed to handle different needs in a React app.

Redux is a centralized store that can hold the entire state of an application, and its actions and reducers manage updates to the state. It's useful when you have complex or large state management needs, and you want to maintain a single source of truth for your state.

On the other hand, useContext hook is a simpler alternative to Redux, especially when your state needs are small or local. It provides a way to pass data from a parent component to its children components without having to pass the data down as props through every level. This can make your code more readable and maintainable.

In summary, you can use either useContext or Redux depending on the complexity and size of your state management needs. If you have simple state needs, you can use useContext, but if your state needs are more complex or large, you can use Redux to manage it more effectively.


